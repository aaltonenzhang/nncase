name: compiler-build

on: [push, pull_request]

env:
  BUILD_TYPE: Release
  NNCASE_VERSION_SUFFIX: .dev${{github.run_number}}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04,windows-2019,macos-10.15]

    steps:
    - uses: actions/checkout@v2
    - uses: seanmiddleditch/gha-setup-ninja@master

    - name: Install System Requirements
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt update
        sudo apt install libgtk2.0-dev -y

    - name: Install System Requirements
      if: runner.os == 'Macos'
      shell: bash
      run: |
        brew install sunnycase/core/libomp@11.1.0

    - name: Add msbuild to PATH
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1.9.0
          
    - name: Setup Python
      uses: actions/setup-python@v2.2.1
      with:
        python-version: 3.7

    - name: Install Conan
      shell: bash
      run: |
        pip install conan numpy==1.19.5

    - name: Configure Conan
      if: runner.os == 'Linux'
      shell: bash
      run: |
        conan profile new default --detect
        conan profile update settings.compiler.libcxx=libstdc++11 default

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      env:
        CC: gcc-10
        CXX: g++-10
      if: runner.os == 'Linux'
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake -G Ninja $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_TESTING=ON -DPython3_ROOT_DIR=${pythonLocation}

    - name: Configure CMake
      if: runner.os != 'Linux'
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake -G Ninja $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_TESTING=ON -DPython3_ROOT_DIR=${pythonLocation}

    - name: Build
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: |
        cmake --build . --config $BUILD_TYPE

    - name: Install
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake --install . --prefix ../install

    - name: CTest
      shell: bash
      working-directory: ${{github.workspace}}/build/tests/kernels
      run: ctest -C $BUILD_TYPE
      
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.2.2
      with:
        name: nncase-${{matrix.os}}-x86_64
        path: ${{github.workspace}}/install
        if-no-files-found: error

  test-compiler:
    needs: [build]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04,windows-2019,macos-10.15]

    steps:
    - uses: actions/checkout@v2

    - name: Install System Requirements
      if: runner.os == 'Macos'
      shell: bash
      run: |
        brew install sunnycase/core/libomp@11.1.0

    - name: Install System Requirements
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt update
        sudo apt install libgtk2.0-dev -y
        sudo apt-get install libegl1-mesa-dev -y
        sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler -y
        sudo apt-get install --no-install-recommends libboost-all-dev -y
        sudo apt-get install libopenblas-dev liblapack-dev libatlas-base-dev -y
        sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev -y
        sudo unlink /usr/lib/x86_64-linux-gnu/libboost_python.so
        sudo ln -s /usr/lib/x86_64-linux-gnu/libboost_python-py36.so /usr/lib/x86_64-linux-gnu/libboost_python.so

    - name: Setup Python
      uses: actions/setup-python@v2.2.1
      with:
        python-version: 3.7

    - name: Install Python Packages
      if: runner.os != 'Macos'
      shell: bash
      run: |
        pip install conan tensorflow==2.5.0 matplotlib pillow onnx==1.9.0 onnx-simplifier==0.3.6 onnxoptimizer==0.2.6 onnxruntime==1.8.0 numpy==1.19.5
        pip install torch==1.9.0+cpu torchvision==0.10.0+cpu -f https://download.pytorch.org/whl/torch_stable.html
        pip install pytest

    - name: Install Python Packages
      if: runner.os == 'Macos'
      shell: bash
      run: |
        pip install conan tensorflow==2.5.0 matplotlib pillow onnx==1.9.0 onnx-simplifier==0.3.6 onnxoptimizer==0.2.6 onnxruntime==1.8.0
        pip install torch==1.9.0 torchvision==0.10.0 -f https://download.pytorch.org/whl/torch_stable.html
        pip install pytest

    - name: Create Test Environment
      working-directory: ${{github.workspace}}
      shell: bash
      run: |
        pip install pytest
        mkdir test_results

    - name: Download a Build Artifact
      uses: actions/download-artifact@v2.0.9
      with:
        name: nncase-${{matrix.os}}-x86_64
        path: ${{github.workspace}}/install

    - name: Download a Build Artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: cmake.yml
        branch: nncase
        name: libcaffe
        path: ${{github.workspace}}/python/caffe
        repo: aaltonenzhang/caffe

    - name: Download a Python Package Artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: cmake.yml
        branch: nncase
        name: warpctc-caffe-1.0.0
        path: ${{github.workspace}}/python/caffe
        repo: aaltonenzhang/caffe

    - name: Install Caffe
      working-directory: ${{github.workspace}}/python/caffe
      shell: bash
      run: |
        cd ${{github.workspace}}/python/caffe
        pip install --target ${{github.workspace}}/install/python/warpctc-caffe warpctc-caffe-1.0.0.tar.gz

    - name: Test
      working-directory: ${{github.workspace}}
      if: runner.os == 'Linux'
      shell: bash
      env:
        PYTHONPATH: ${{github.workspace}}/install/lib:${{github.workspace}}/install/python:${{github.workspace}}/install/python/warpctc-caffe:${{github.workspace}}/tests
        LD_LIBRARY_PATH: ${{github.workspace}}/python/caffe:/usr/lib/x86_64-linux-gnu
      run: |
        pytest tests/importer/caffe --doctest-modules --junitxml=test_results/importer_caffe.xml
        pytest tests/importer/tflite --doctest-modules --junitxml=test_results/importer_tflite.xml
        pytest tests/importer/onnx --doctest-modules --junitxml=test_results/importer_onnx.xml
        pytest tests/schedule --doctest-modules --junitxml=test_results/schedule.xml
        pytest tests/schedule --doctest-modules --junitxml=test_results/graph_partition.xml

    - name: Test
      working-directory: ${{github.workspace}}
      if: runner.os == 'Macos'
      shell: bash
      env:
        PYTHONPATH: ${{github.workspace}}/install/lib:${{github.workspace}}/install/python:${{github.workspace}}/tests
      run: |
        pytest tests/importer/tflite --doctest-modules --junitxml=test_results/importer_tflite.xml
        pytest tests/importer/onnx --doctest-modules --junitxml=test_results/importer_onnx.xml
        pytest tests/schedule --doctest-modules --junitxml=test_results/schedule.xml
        pytest tests/schedule --doctest-modules --junitxml=test_results/graph_partition.xml

    - name: Test
      working-directory: ${{github.workspace}}
      if: runner.os == 'Windows'
      shell: bash
      env:
        PATH: ${{github.workspace}}/install/bin
        PYTHONPATH: ${{github.workspace}}/install/lib;${{github.workspace}}/install/python;${{github.workspace}}/tests
      run: |
        pytest tests/importer/tflite --doctest-modules --junitxml=test_results/importer_tflite.xml
        pytest tests/importer/onnx --doctest-modules --junitxml=test_results/importer_onnx.xml
        pytest tests/schedule --doctest-modules --junitxml=test_results/schedule.xml
        pytest tests/schedule --doctest-modules --junitxml=test_results/graph_partition.xml

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always() && runner.os == 'Linux'
      with:
        files: test_results/*.xml
